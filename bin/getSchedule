#!/usr/bin/env node
'use strict';

/*
  Get all the libs, etc...
 */
var shortid = require( 'shortid' );
var shared = require( '../shared' );
var env = shared.env;
var debug = shared.debug( 'bin:getSchedule' );
var redisClient = shared.redisClient;
var redisPrefix = env.get( 'REDIS_PREFIX' ) || 'firehug';
var redisPrefix = redisPrefix + ':sheets';

var GoogleSpreadsheet = require( 'google-spreadsheet' );

// This is where all gets put.
var worksheets = {};

// We do NOT want to be keeping any email addresses, so regex to find them
var emailRegex = new RegExp('(?:[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*|"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])', 'ig');

/*
  Get the raw data and make it useful
 */
var doc = new GoogleSpreadsheet( env.get( 'GOOGLE_KEY' ) );
doc.setAuth( env.get( 'GOOGLE_USER' ), env.get( 'GOOGLE_USER_PASS' ), function( error ) {
  if( error ) {
    debug( 'FATAL ERROR: Failed to authenticate with Google.' );
    console.error( error );
    process.exit( 1 );
  }

  doc.getInfo( function( error, rawData ) {
    if( error ) {
      debug( 'FATAL ERROR: Failed to get schedule information from Google.' );
      console.error( error );
      process.exit( 1 );
    }

    // simple counter to check if all sheets processed
    var processedSheets = 0;
    // simple counter to check if save is in progress
    var savesInProgress = 0;

    // process worksheets
    debug( 'Found %d worksheets to process', rawData.worksheets.length );
    rawData.worksheets.forEach( function( sheet, idx ) {
      debug( 'Processing sheet "%s"', sheet.title );
      // setup sane usage
      worksheets[ sheet.title ] = sheet;
      sheet = worksheets[ sheet.title ];

      // add the index for the sheet to sheet obj
      sheet.sheetIndex = idx;

      // get rows headings
      sheet.getRows( function( error, rowData ) {
        if( error ) {
          debug( 'FATAL ERROR: Failed to get rows from sheet "%s"', sheet.title );
          console.error( error );
          process.exit( 1 );
        }
        // get column headings before processing futher
        sheet.columnNames = [];
        for( var key in rowData[ 0 ] ) {
          // if key not "content" or starting w/ an "_" AND is a string
          if( ( !/^(_|content|email)/.test( key ) ) && ( typeof rowData[ 0 ][ key ] === 'string' ) ) {
            sheet.columnNames.push( key );
          }
        }

        // now deal w/ row data
        sheet.data = [];
        rowData.forEach( function( row ) {
          var tmp = {};

          sheet.columnNames.forEach( function( column ) {
            var safeColumn = row[ column ];

            /*
              Remove emails on inbound data. Never store these outside gDocs.
             */
            if( ! /^meta$/i.test( sheet.title ) ) { // SKIP CHECK if we're looking at the "meta" sheet.
              safeColumn = safeColumn.replace( emailRegex, '' ); // remove emails if added
              safeColumn = safeColumn.replace( /<>/ig, '' ); // clean up a little from email removal
            }

            /*
              Remove anything that could bork things using the data.
             */
            safeColumn = safeColumn.replace( /(<([^>]+)>)/ig, '' ); // remove html
            safeColumn = safeColumn.trim(); // no silly excess whitespace

            /*
              Ensure all rows that have a "SID" column have a value for "SID".
             */
            if( column === 'sid' && !safeColumn ) {
              var sid = shortid.generate();

              // save sid to spreadsheet
              row[ column ] = sid;
              savesInProgress += 1;
              row.save( function() {
                savesInProgress -= 1;
              });

              safeColumn.id = sid; // in safe column we're going to override id
            }

            tmp[ column ] = safeColumn;
          });

          sheet.data.push( tmp );
        });

        // store data in redis db
        redisClient.set( redisPrefix + ':' + sheet.title, JSON.stringify( worksheets[ sheet.title ] ), function() {
          // check if all worksheets processed + exit if so.
          processedSheets += 1;
        });
      });
    });

    (function exitLoop() {
      if( processedSheets === rawData.worksheets.length && !savesInProgress ) {
        debug( 'All schedule data processed' );
        // done all the things, exit now
        return process.exit( 0 );
      }

      setTimeout( exitLoop, 10 );
    }());
  });
});

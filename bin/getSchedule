#!/usr/bin/env node

'use strict';

var redis = require('redis');
var nconf = require('nconf');
var async = require('async');
var GoogleSpreadsheet = require('google-spreadsheets');

nconf.argv().env().file({
  file: __dirname + '/../local.json'
});

function getRedisClient() {
  if (process.env.VCAP_SERVICES) {
    var redisconf = JSON.parse(process.env.VCAP_SERVICES).redis[0].credentials;
    var db = redis.createClient(redisconf.port,
      redisconf.host);
    db.auth(redisconf.password);
  } else {
    var db = redis.createClient();
  }
  return db;
}
var client = getRedisClient();

var getObjSize = function (obj) {
  var size = 0;
  var key;

  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      size ++;
    }
  }

  return size;
};

var setType = function (opts, cell) {
  var value = cell.value || '';

  switch (cell.col) {
    case '1':
      opts.startTime = value;
      break;

    case '2':
      opts.endTime = value;
      break;

    case '3':
      opts.location = value;
      break;

    case '4':
      opts.name = value;
      break;

    case '5':
      opts.description = value;
      break;

    case '6':
      opts.link = value;
      break;

    case '7':
      opts.speaker = value;
      break;
  }

  return opts;
};

var readWorksheet = function (worksheet, next) {
  var title = worksheet.title.toLowerCase();

  worksheet.cells({
    range: 'R1C1:R' + worksheet.rowCount + 'C' + worksheet.colCount

  }, function (err, cells) {
    if (err) {
      next(err);
      return;
    }
    var rowCount = 1;
    var count = 1;

    for (var cell in cells) {
      var count = 1;
      var events = {};

      for (var ev in cells[cell]) {
        var row = cells[cell][ev];
        var opts = {};

        if (row && count > 1) {
          for (var c in row) {
            opts = setType(opts, row[c]);
          }
        }

        if (getObjSize(opts)) {
          events[rowCount] = opts;
          rowCount ++;
        }

        count ++;
      }

      client.set('schedule:' + title, JSON.stringify(events),
        function (err) {
        if (err) {
          console.log('Could not save schedule ', title, events);
          next(err);
          return;
        }
        client.sadd('schedules', title);

        console.log('%s: %d - Saved schedule', title, count);
        next(null);
      });
    }
  });
};

GoogleSpreadsheet({
  key: nconf.get('googleKey')

}, function (err, spreadsheets) {
  if (err) {
    throw new Error('Error reading spreadsheets data ', err);
  }
  async.each(spreadsheets.worksheets, readWorksheet, function(err) {
    if (err) {
      throw err;
    }
    console.log('getSchedule success');
    process.exit();
  });
});

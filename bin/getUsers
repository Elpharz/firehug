#!/usr/bin/env node

'use strict';

var http = require('http');
var https = require('https');
var redis = require('redis');
var querystring = require('querystring');
var async = require('async');

var shared = require('./../shared');
var nconf = shared.nconf;
var client = shared.redisClient;

var LIMIT = 100;
var DOMAIN = nconf.get('mozilliansURL');
var API_URL = DOMAIN + '/api/v1/users/?' + querystring.stringify({
  app_name: nconf.get('apiApp'),
  app_key: nconf.get('apiKey'),
  limit: LIMIT,
  is_vouched: 'true',
  groups: 'summit2013-brussels,summit2013-toronto,summit2013-santa-clara'
});

var LOCATIONS = {
  'santa-clara': 'sc',
  'toronto': 'to',
  'brussels': 'br'
}

var options = {
  host: nconf.get('mozilliansURL').split('://')[1],
  headers: {
    accept: 'application/json, text/plain, */*'
  },
  path: API_URL,
  method: 'GET'
};

// Save user to redis
var setUser = function(user, next) {
  var email = user.email.toLowerCase();

  if (!email || !user.username || !user.full_name) {
    return next('Bad user');
  }

  var location = null;
  var bits;
  if (user.groups && (bits = user.groups.match(/summit2013-([a-z-]+)/m))) {
    location = LOCATIONS[bits[1]];
  }
  if (!location) {
    return next('Missing location');
  }

  var dialog = null;
  if (user.dialog) {
    dialog = user.dialog.split(/,/);
  }

  var username = user.username;

  var entry = {
    fullName: user.full_name,
    username: user.username,
    email: email,
    avatar: user.photo,
    location: location,
    dialog: dialog,
    country: user.country
  };
  // Reduce data that we store
  for (var key in entry) {
    if (!entry[key]) {
      delete entry[key];
    }
  }

  client.hmset('user:' + username, entry, function(err) {
    if (err) {
      console.log('Could not save user ', err);
      return next(err);
    }
    client.set('email:' + email, username, function(err) {
      if (err) {
        console.log('Could not save email ', err);
        return next(err);
      }
      client.sadd('emails', email);
      client.sadd('usernames', username);
      if (location) {
        client.sadd('location:' + location, username);
      }
      // console.log('user: %s @ %s', username, location);
      next();
    });
  });
};

var getUsers = function(callback) {
  var finished = false;
  https.get(options, function(backendResponse) {
    var data = [];

    backendResponse.on('data', function(chunk) {
      data.push(chunk);
    });

    backendResponse.on('end', function() {
      var result = JSON.parse(data.join(''));

      if (result.meta.next === null) {
        finished = true;
      } else {
        options.path = DOMAIN + result.meta.next;
      }

      if (result) {
        async.each(result.objects, setUser, function(err) {
          // console.log('user batch: %d', Object.keys(result.objects).length);
          callback(finished);
        });
      }
    });
  });
};

(function getMoreUsers() {
  getUsers(function(finished) {
    if (!finished) {
      console.log('getMoreUsers');
      getMoreUsers();
    } else {
      console.log('getUsers success');
      process.exit();
    }
  });
}());